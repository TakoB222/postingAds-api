// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	domain "github.com/TakoB222/postingAds-api/internal/domain"
	repository "github.com/TakoB222/postingAds-api/internal/repository"
	service "github.com/TakoB222/postingAds-api/internal/service"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// RefreshSession mocks base method.
func (m *MockAuthorization) RefreshSession(input service.RefreshInput) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSession", input)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshSession indicates an expected call of RefreshSession.
func (mr *MockAuthorizationMockRecorder) RefreshSession(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSession", reflect.TypeOf((*MockAuthorization)(nil).RefreshSession), input)
}

// SignIn mocks base method.
func (m *MockAuthorization) SignIn(input service.SignInInput) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", input)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthorizationMockRecorder) SignIn(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthorization)(nil).SignIn), input)
}

// SignUp mocks base method.
func (m *MockAuthorization) SignUp(input service.UserSignUpInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthorizationMockRecorder) SignUp(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthorization)(nil).SignUp), input)
}

// MockAdmin is a mock of Admin interface.
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin.
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance.
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// AdminDeleteUserAdById mocks base method.
func (m *MockAdmin) AdminDeleteUserAdById(adId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDeleteUserAdById", adId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDeleteUserAdById indicates an expected call of AdminDeleteUserAdById.
func (mr *MockAdminMockRecorder) AdminDeleteUserAdById(adId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDeleteUserAdById", reflect.TypeOf((*MockAdmin)(nil).AdminDeleteUserAdById), adId)
}

// AdminGetAd mocks base method.
func (m *MockAdmin) AdminGetAd(adId string) (domain.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAd", adId)
	ret0, _ := ret[0].(domain.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAd indicates an expected call of AdminGetAd.
func (mr *MockAdminMockRecorder) AdminGetAd(adId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAd", reflect.TypeOf((*MockAdmin)(nil).AdminGetAd), adId)
}

// AdminGetAllAdsByAdmin mocks base method.
func (m *MockAdmin) AdminGetAllAdsByAdmin() ([]domain.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAllAdsByAdmin")
	ret0, _ := ret[0].([]domain.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAllAdsByAdmin indicates an expected call of AdminGetAllAdsByAdmin.
func (mr *MockAdminMockRecorder) AdminGetAllAdsByAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAllAdsByAdmin", reflect.TypeOf((*MockAdmin)(nil).AdminGetAllAdsByAdmin))
}

// AdminRefreshSession mocks base method.
func (m *MockAdmin) AdminRefreshSession(input service.RefreshInput) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRefreshSession", input)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRefreshSession indicates an expected call of AdminRefreshSession.
func (mr *MockAdminMockRecorder) AdminRefreshSession(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRefreshSession", reflect.TypeOf((*MockAdmin)(nil).AdminRefreshSession), input)
}

// AdminSignIn mocks base method.
func (m *MockAdmin) AdminSignIn(input service.SignInInput) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminSignIn", input)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminSignIn indicates an expected call of AdminSignIn.
func (mr *MockAdminMockRecorder) AdminSignIn(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminSignIn", reflect.TypeOf((*MockAdmin)(nil).AdminSignIn), input)
}

// AdminUpdateAd mocks base method.
func (m *MockAdmin) AdminUpdateAd(adId string, ad service.Ads) (domain.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateAd", adId, ad)
	ret0, _ := ret[0].(domain.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminUpdateAd indicates an expected call of AdminUpdateAd.
func (mr *MockAdminMockRecorder) AdminUpdateAd(adId, ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateAd", reflect.TypeOf((*MockAdmin)(nil).AdminUpdateAd), adId, ad)
}

// MockAd is a mock of Ad interface.
type MockAd struct {
	ctrl     *gomock.Controller
	recorder *MockAdMockRecorder
}

// MockAdMockRecorder is the mock recorder for MockAd.
type MockAdMockRecorder struct {
	mock *MockAd
}

// NewMockAd creates a new mock instance.
func NewMockAd(ctrl *gomock.Controller) *MockAd {
	mock := &MockAd{ctrl: ctrl}
	mock.recorder = &MockAdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAd) EXPECT() *MockAdMockRecorder {
	return m.recorder
}

// CreateAd mocks base method.
func (m *MockAd) CreateAd(userId string, adInput service.Ads) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAd", userId, adInput)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAd indicates an expected call of CreateAd.
func (mr *MockAdMockRecorder) CreateAd(userId, adInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAd", reflect.TypeOf((*MockAd)(nil).CreateAd), userId, adInput)
}

// DeleteAd mocks base method.
func (m *MockAd) DeleteAd(userId, adId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAd", userId, adId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAd indicates an expected call of DeleteAd.
func (mr *MockAdMockRecorder) DeleteAd(userId, adId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAd", reflect.TypeOf((*MockAd)(nil).DeleteAd), userId, adId)
}

// Fts mocks base method.
func (m *MockAd) Fts(search_request string) ([]repository.FtsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fts", search_request)
	ret0, _ := ret[0].([]repository.FtsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fts indicates an expected call of Fts.
func (mr *MockAdMockRecorder) Fts(search_request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fts", reflect.TypeOf((*MockAd)(nil).Fts), search_request)
}

// GetAdById mocks base method.
func (m *MockAd) GetAdById(userId, adId string) (domain.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdById", userId, adId)
	ret0, _ := ret[0].(domain.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdById indicates an expected call of GetAdById.
func (mr *MockAdMockRecorder) GetAdById(userId, adId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdById", reflect.TypeOf((*MockAd)(nil).GetAdById), userId, adId)
}

// GetAllAds mocks base method.
func (m *MockAd) GetAllAds(userId string) ([]domain.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAds", userId)
	ret0, _ := ret[0].([]domain.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAds indicates an expected call of GetAllAds.
func (mr *MockAdMockRecorder) GetAllAds(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAds", reflect.TypeOf((*MockAd)(nil).GetAllAds), userId)
}

// UpdateAd mocks base method.
func (m *MockAd) UpdateAd(userId, adId string, ad service.Ads) (domain.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAd", userId, adId, ad)
	ret0, _ := ret[0].(domain.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAd indicates an expected call of UpdateAd.
func (mr *MockAdMockRecorder) UpdateAd(userId, adId, ad interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAd", reflect.TypeOf((*MockAd)(nil).UpdateAd), userId, adId, ad)
}
